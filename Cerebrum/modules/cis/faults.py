#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012 University of Oslo, Norway
#
# This file is part of Cerebrum.
#
# Cerebrum is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Cerebrum is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cerebrum; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
"""The faults that are used by the different CIS services.

Faults are a concept that is used e.g. in the SOAP standards, and are almost
like exceptions.

In SOAP, faults are returned to the client by the use of a faultcode and a
faultstring. The faultcode gives the type of fault, e.g. 'client' for errors
generated by the client, or 'server' for server errors. The faulstring should
contain the explanation to what went wrong.

"""

from __future__ import unicode_literals

from rpclib.model.fault import Fault

# TODO: define type name and faultcodes better


class CerebrumFault(Fault):
    """
    The base Fault for our usage. All our Faults should be subclassed out of
    this, to be able to catch and return the faults correctly.
    """
    __namespace__ = 'tns'
    __tns__ = 'tns'

    # The faultcode that should be returned in the SOAP faults:
    faultcode = 'Client.CerebrumError'

    def __init__(self, err):
        # TODO: handle that err could be a list of strings, first element
        # should be faultstring, rest should go in self.extra.
        faultstring = err
        if isinstance(err, Exception) and err.args:
            faultstring = err.args[0]
            self.extra = err.args[1:]
        faultstring = str(faultstring)
        Fault.__init__(self, faultcode=self.faultcode,
                       faultstring=faultstring)


class EndUserFault(CerebrumFault):
    """
    This is the Fault that should be returned and given to the end user.
    Faults of this type should be understandable by an end user.
    """
    __type_name__ = 'UserError'
    faultcode = 'Client.UserError'


class UnknownFault(CerebrumFault):
    """A generic Fault when unknown errors occur on the server side."""
    __type_name__ = 'UnknownError'
    faultcode = 'Server'

    def __init__(self, err=None):
        if not err:
            err = 'Unknown Error'
        super(UnknownFault, self).__init__(err)


class NotAuthorizedError(CerebrumFault):
    """The Fault that is returned if the end user is authenticated, but is not
    authorized to fully execute the command. This could be raised either
    before the method itself is executed, or inside the method, if the user
    tries to do something e.g. that is only allowed for superusers.

    """
    __type_name__ = 'NotAuthorized'
    faultcode = 'Client.NotAuthorized'

    def __init__(self, err=None):
        if not err:
            err = 'Not authorized'
        super(NotAuthorizedError, self).__init__(err)


class AuthenticationError(CerebrumFault):
    """The Fault that is returned if the authentication process failed.
    """
    __type_name__ = 'AuthenticationFault'
    faultcode = 'Client.AuthenticationFault'

    def __init__(self, err=None):
        if not err:
            err = 'Authenticated failed'
        super(AuthenticationError, self).__init__(err)


class NotAuthenticatedError(CerebrumFault):
    """The Fault that is returned if the end user has not authenticated before
    calling a method that requires authentication. Raised by the event
    L{on_method_authentication}.
    """
    __type_name__ = 'NotAuthenticated'
    faultcode = 'Client.NotAuthenticated'

    def __init__(self, err=None):
        if not err:
            err = 'Not authenticated'
        super(NotAuthenticatedError, self).__init__(err)
