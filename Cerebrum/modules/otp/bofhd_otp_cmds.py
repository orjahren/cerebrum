# -*- coding: utf-8 -*-
#
# Copyright 2021-2022 University of Oslo, Norway
#
# This file is part of Cerebrum.
#
# Cerebrum is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Cerebrum is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cerebrum; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
"""
Bofhd *queue* command group for interacting with the event queue log.
"""
import operator

from Cerebrum import Errors
from Cerebrum.Utils import Factory
from Cerebrum.modules.bofhd.auth import BofhdAuth
from Cerebrum.modules.bofhd.bofhd_core import BofhdCommandBase
from Cerebrum.modules.bofhd.bofhd_core_help import get_help_strings
from Cerebrum.modules.bofhd.cmd_param import (
    Command,
    FormatSuggestion,
    PersonId,
    SimpleString,
)
from Cerebrum.modules.bofhd.errors import CerebrumError, PermissionDenied
from Cerebrum.modules.bofhd.help import merge_help_strings
from Cerebrum.utils.aggregate import unique

from . import otp_utils
from .otp_db import sql_search
from .otp_types import PersonOtpUpdater, get_policy


class OtpSessionCache(object):
    """
    Temporary otp secret storage in the bofhd operator session.

    When we generate or store otp secrets in bofhd, we temporarily store the
    secret in plaintext, so that the operator can retrieve it and pass it on to
    the user.
    """

    state_type = "person_otp_secret"

    def __init__(self, operator):
        self._op = operator

    def set(self, person_id, secret):
        """ Add a secret to the session cache. """
        self._op.store_state(
            self.state_type,
            {
                'person_id': int(person_id),
                'secret': secret,
            },
        )

    def clear(self, person_id):
        """ Clear a secret from the session cache. """
        # Session state is a bit bare-bones, and there are no good ways to
        # *remove* a single entry.  We cheat by setting the latest entry to
        # None, and removing blank entries when listing.
        self.set(person_id, None)

    def list(self):
        """ Get most recent secret for each person in the session cache. """
        # Get all relevant rows, ordered by set_time:
        all_entries = [row['state_data']
                       for row in self._op.get_state(self.state_type)]
        # Remove duplicate entries, keeping only the most recent:
        most_recent = list(unique(reversed(all_entries),
                           key=operator.itemgetter('person_id')))
        # Reverse and remove cleared (empty) secrets:
        return [item for item in reversed(most_recent) if item['secret']]

    def clear_all(self):
        """ Clear all secrets in the session cache. """
        self._op.clear_state(state_types=self.state_type)


class OtpAuth(BofhdAuth):
    """ Auth for history commands. """

    def _is_otp_protected(self, person):
        """ check if person is protected from otp changes in bofhd. """
        return False

    def _can_modify_otp_secret(self, operator, person=None,
                               query_run_any=False):
        if query_run_any:
            return self.is_superuser(operator)

        if not self.is_superuser(operator):
            raise PermissionDenied('Only superuser can modify OTP data')

        if self._is_otp_protected(person):
            raise PermissionDenied('Person is protected from OTP changes')

        return True

    def can_show_otp_info(self, operator, person=None, query_run_any=False):
        """ Check if an operator is allowed to show otp info for a given person.

        :param int operator: entity_id of the authenticated user
        :param person: A cerebrum person object
        """
        return self._can_modify_otp_secret(operator, person=person,
                                           query_run_any=query_run_any)

    def can_set_otp_secret(self, operator, person=None, generate=True,
                           query_run_any=False):
        """ Check if an operator is allowed to set otp secret for a given person.

        :param int operator: entity_id of the authenticated user
        :param person: A cerebrum person object
        :param generate: If the secret is generated by us, and not given by op
        """
        return self._can_modify_otp_secret(operator, person=person,
                                           query_run_any=query_run_any)

    def can_clear_otp_secret(self, operator, person=None, query_run_any=False):
        """ Check if an operator is allowed to clear otp secret for a given person.

        :param int operator: entity_id of the authenticated user
        :param person: A cerebrum person object
        """
        return self._can_modify_otp_secret(operator, person=person,
                                           query_run_any=query_run_any)


def _get_person_name(person):
    try:
        return person.get_name(person.const.system_cached,
                               person.const.name_full)
    except Errors.NotFoundError:
        return None


def _get_primary_account(person):
    account_id = person.get_primary_account()
    if account_id is None:
        return None
    account = Factory.get('Account')(person._db)
    try:
        account.find(account_id)
        return account
    except Errors.NotFoundError:
        return None


class OtpCommands(BofhdCommandBase):
    """BofhdExtension for history related commands and functionality."""

    all_commands = {}
    authz = OtpAuth

    @property
    def otp_policy(self):
        """ default otp policy. """
        try:
            self.__otp_pol
        except AttributeError:
            self.__otp_pol = get_policy()
        return self.__otp_pol

    @classmethod
    def get_help_strings(cls):
        """Get help strings."""
        return merge_help_strings(
            get_help_strings(),
            ({}, COMMAND_HELP, ARGUMENT_HELP),
        )

    #
    # person otp_info <person>
    #
    all_commands['person_otp_info'] = Command(
        ('person', 'otp_info'),
        PersonId(help_ref="id:target:person"),
        fs=FormatSuggestion(
            [(" %-9d  %-12s %s", ('person_id', 'otp_type', 'updated_at'))],
            hdr=" %-9s  %-12s %s" % ("person id", "otp type", "updated at"),
        ),
        perm_filter='can_show_otp_info',
    )

    def person_otp_info(self, operator, person_ident):
        """ Show registered OTP types (targets) for a person. """
        person = self._get_entity(entity_type='person', ident=person_ident)
        self.ba.can_show_otp_info(operator.get_entity_id(), person=person)
        otp_data = sql_search(self.db, person_id=person.entity_id)
        if not otp_data:
            raise CerebrumError('No OTP secret set for person %r' %
                                (person_ident,))

        return [{
            'person_id': row['person_id'],
            'otp_type': row['otp_type'],
            'updated_at': row['updated_at'],
        } for row in otp_data]

    #
    # person otp_set <person> [secret]
    #
    all_commands['person_otp_set'] = Command(
        ('person', 'otp_set'),
        PersonId(help_ref="id:target:person"),
        SimpleString(help_ref='otp_shared_secret', optional=True),
        fs=FormatSuggestion(
            "\n".join((
                "OK, stored OTP secret for person_id: %d",
                "(use 'person otp_session_list' to list secrets from"
                " this session)",
            )),
            ('person_id',),
        ),
        perm_filter='can_set_otp_secret',
    )

    def _set_otp_secret(self, person_id, secret):
        PersonOtpUpdater(self.db, self.otp_policy).update(person_id, secret)
        OtpSessionCache(operator).set(person_id, secret)

    def person_otp_set(self, operator, person_ident, secret=None):
        """ Set or reset OTP secret for a person. """
        person = self._get_entity(entity_type='person', ident=person_ident)
        self.ba.can_set_otp_secret(operator.get_entity_id(),
                                   person=person, generate=not secret)

        if not secret:
            secret = otp_utils.generate_secret()

        try:
            otp_utils.validate_secret(secret)
        except ValueError as e:
            raise CerebrumError(e)

        self._set_otp_secret(person.entity_id, secret)
        return {
            'person_id': int(person.entity_id),
        }

    #
    # person otp_clear <person>
    #
    all_commands['person_otp_clear'] = Command(
        ('person', 'otp_clear'),
        PersonId(help_ref="id:target:person"),
        fs=FormatSuggestion(
            'OK, cleared OTP secret for person_id: %d', ('person_id',),
        ),
        perm_filter='can_clear_otp_secret',
    )

    def _clear_otp_secret(self, person_id):
        PersonOtpUpdater(self.db, self.otp_policy).clear_all(person_id)
        OtpSessionCache(operator).clear(person_id)

    def person_otp_clear(self, operator, person_ident):
        """ Clear all OTP secrets set for a person. """
        person = self._get_entity(entity_type='person', ident=person_ident)
        self.ba.can_clear_otp_secret(operator.get_entity_id(), person=person)

        self._clear_otp_secret(person.entity_id)
        return {
            'person_id': int(person.entity_id),
        }

    #
    # person otp_session_list
    #
    all_commands['person_otp_session_list'] = Command(
        ('person', 'otp_session_list'),
        fs=FormatSuggestion(
            "%-8s  %-10s  %s", ("person_id", "account_name", "uri"),
            hdr="%-8s  %-10s  %s" % ("Id", "Primary",  "Uri")
        ),
        perm_filter='can_set_otp_secret',
    )

    def _get_otp_session_entry(self, session_data):
        person_id = session_data['person_id']
        secret = session_data['secret']

        entry = {
            'person_id': person_id,
            'person_name': None,
            'secret': secret,
            'uri': otp_utils.format_otp_uri(secret),
            'account_name': None,
            'account_id': None,
        }

        pe = Factory.get('Person')(self.db)
        pe.find(person_id)
        entry['person_name'] = _get_person_name(pe)
        ac = _get_primary_account(pe)
        if ac:
            entry.update({
                'account_name': ac.account_name,
                'account_id': ac.entity_id,
            })
        return entry

    def person_otp_session_list(self, operator):
        """ List otpauth uris for secrets set in current session. """
        if not self.ba.can_set_otp_secret(operator.get_entity_id(),
                                          query_run_any=True):
            raise PermissionDenied('No access to otp session data')

        cached_secrets = OtpSessionCache(operator).list()
        if not cached_secrets:
            raise CerebrumError('No otp secrets set in current session')

        return [self._get_otp_session_entry(item) for item in cached_secrets]

    #
    # person otp_session_clear
    #
    all_commands['person_otp_session_clear'] = Command(
        ('person', 'otp_session_clear'),
        fs=FormatSuggestion(
            'OK, cleared %d entries from session cache', ('count',),
        ),
        perm_filter='can_set_otp_secret',
    )

    def person_otp_session_clear(self, operator):
        """ Clear otpauth uris for secrets set in current session. """
        if not self.ba.can_set_otp_secret(operator.get_entity_id(),
                                          query_run_any=True):
            raise PermissionDenied('No access to otp session data')

        session_cache = OtpSessionCache(operator)
        session_data = session_cache.list()
        if not session_data:
            raise CerebrumError('No otp secrets set in current session')

        session_cache.clear_all()
        return {
            'count': len(session_data),
        }


def _from_docstring(func):
    return func.__doc__.strip().split('\n')[0]


COMMAND_HELP = {
    'person': {
        'person_otp_info': _from_docstring(OtpCommands.person_otp_info),
        'person_otp_set': _from_docstring(OtpCommands.person_otp_set),
        'person_otp_clear': _from_docstring(OtpCommands.person_otp_clear),
        'person_otp_session_list':
            _from_docstring(OtpCommands.person_otp_session_list),
        'person_otp_session_clear':
            _from_docstring(OtpCommands.person_otp_session_clear),
    }
}

ARGUMENT_HELP = {
    'otp_shared_secret':
        ['otp-secret', 'OTP shared secret',
         'An OTP shared secret to use (in base32 representation)'],
}
